// using System;
using UnityEngine;
using UnityEngine.SceneManagement;

// Responsable de la boucle temporelle
public class GameFlowManager : MonoBehaviour
{
    public static GameFlowManager Instance; // Singleton

    [Header("Param√®tres de sc√®nes")]
    [SerializeField] private string nextSceneName = ""; // Nom de la sc√®ne suivante

    [Header("Player")]
    [SerializeField] private Transform playerSpawn; // point de respawn
    private GameObject player;

    [Header("Progression du Niveau")]
    [SerializeField] private SpawnerObject spawnerToTrigger;
    [SerializeField] private GameObject flowersPrefab; // La fleur que nous allons instancier
    [SerializeField] private float flowersToSpawn = 5; // Nombre de fleurs √† faire appara√Ætre

    private bool levelCompleted = false; // Pour √©viter de d√©clencher l'√©v√©nement plusieurs fois


    // Ajoutez une r√©f√©rence directe au joueur ici
    [SerializeField] private GameObject playerPrefab;
    private GameObject currentPlayerInstance;

    [Header("Boucle temporelle")]
    [Tooltip("Dur√©e d'une boucle en secondes")]
    public float loopDuration = 20f; // dur√©e d'une boucle en secondes
    [HideInInspector] // On masque cette variable dans l'√©diteur car elle est mise √† jour par le script
    public float loopTimer;
    [HideInInspector] // Variable publique pour que la LoopBar puisse y acc√©der
    public int loopCount = 1;

    public event System.Action OnLoopRestart;

    void Awake()
    {
        // Singleton
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject); // persiste entre sc√®nes
        }
        else
        {
            Destroy(gameObject);
        }
    }

    // Start is called once before the first execution of Update after the MonoBehaviour is created
    void Start()
    {
        player = GameObject.FindGameObjectWithTag("Player");
        loopTimer = loopDuration;

        InitializeLevel();
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        // D√©compte du timer
        loopTimer -= Time.deltaTime;

        if (loopTimer <= 0f)
        {
            // Appelle la m√©thode pour sauvegarder l'√©tat
            // SaveCurrentState();
            RestartLoop();
        }
    }
    
      // S'abonne √† l'√©v√©nement de changement de sc√®ne
    private void OnEnable()
    {
        SceneManager.sceneLoaded += OnSceneLoaded;
    }

    // Se d√©sabonne √† l'√©v√©nement de changement de sc√®ne
    private void OnDisable()
    {
        SceneManager.sceneLoaded -= OnSceneLoaded;
    }

    // M√©thode appel√©e apr√®s le chargement d'une nouvelle sc√®ne
    private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
    {
        // R√©initialiser les param√®tres pour la nouvelle sc√®ne
        InitializeLevel();
    }

    private void InitializeLevel()
    {
        // Cherche le joueur dans la sc√®ne actuelle et le point de spawn
        player = GameObject.FindGameObjectWithTag("Player");
        if (player == null)
        {
            Debug.LogError("Player non trouv√© ! Assurez-vous que l'objet a le tag 'Player'.");
            return;
        }

        playerSpawn = GameObject.FindGameObjectWithTag("PlayerSpawn").transform;
        if (playerSpawn == null)
        {
            Debug.LogError("PlayerSpawn non trouv√© ! Assurez-vous que l'objet a le tag 'PlayerSpawn'.");
            return;
        }

        // R√©initialise le timer de la boucle
        loopTimer = loopDuration;
    }

    // Cr√©e une nouvelle instance du joueur et met √† jour la r√©f√©rence
    // private void InstantiatePlayer()
    // {
    //     // D√©truit l'ancienne instance si elle existe pour √©viter les doublons
    //     if (currentPlayerInstance != null)
    //     {
    //         Destroy(currentPlayerInstance);
    //     }

    //     // Instancie le nouveau joueur au point de respawn
    //     currentPlayerInstance = Instantiate(playerPrefab, playerSpawn.position, Quaternion.identity);
    // }

    public void RestartLoop()
    {
        Debug.Log("Nouvelle boucle");

        // Sauvegarde l'√©tat actuel avant de le r√©initialiser
        // pour que les changements de la boucle pr√©c√©dente soient m√©moris√©s.
        SaveCurrentState();

        // Appelle la fonction ClearState pour effacer
        // l'√©tat persistant et pr√©parer la prochaine boucle.
        PersistentState.Instance.ClearState();

        // R√©initialise seulement le joueur
        player.transform.position = playerSpawn.position;

        loopTimer = loopDuration;

        // R√©applique l‚Äô√©tat persistant aux objets de la sc√®ne
        PersistentState.Instance.ApplyStateToScene();
        
        // üîî Pr√©venir les autres scripts
        OnLoopRestart?.Invoke();
    }

    // M√©thode pour sauvegarder l'√©tat (√† la fin de la boucle)
    private void SaveCurrentState()
    {
        // Sauvegarde l'√©tat de tous les objets persistants
        var persistentObjects = FindObjectsOfType<PersistentID>();
        foreach (var obj in persistentObjects)
        {
            PersistentState.Instance.SavePosition(obj.gameObject, obj.transform.position);
            PersistentState.Instance.SaveStretch(obj.gameObject, obj.transform.localScale);
            // etc. si d'autres √©tats sont √† sauvegarder
        }
    }

    // M√©thode pour g√©rer l'interaction avec le TriggerObject
    public void HandleTrigger(GameObject triggeredObject)
    {
        // 1. On v√©rifie si l'objet qui est entr√© dans le trigger est la caisse.
        if (triggeredObject.CompareTag("Crate"))
        {
            // 2. Si c'est la caisse, on trouve le pont et on appelle sa m√©thode d'√©tirement.
            //    Assurez-vous que votre pont a bien le script StrechingObject.
            var bridge = FindObjectOfType<StrechingObject>();
            if (bridge != null)
            {
                bridge.ChangeStretch();
            }
            // Ici, vous pourriez aussi g√©rer d'autres actions, comme un son ou un effet visuel.
        }

        // // On v√©rifie si l'objet qui est entr√© dans le trigger est le joueur
        // if (triggeredObject.CompareTag("Player"))
        // {
        //     // Si c'est le joueur, on le r√©initialise (d√©clencher la boucle)
        //     RestartLoop();
        // }
        // else if (triggeredObject.CompareTag("Crate")) // Supposons que votre caisse a le tag "Crate"
        // {
        //     // Si c'est la caisse, on applique la logique de persistance (si n√©cessaire)
        //     // Par exemple, on peut sauvegarder sa position pour la prochaine boucle
        //     PersistentState.Instance.SavePosition(triggeredObject, triggeredObject.transform.position);

        //     // On peut aussi d√©clencher l'action du TriggerObject ici,
        //     // comme l'√©tirement du pont
        //     // triggeredObject.GetComponent<StrechingObject>()?.ChangeStretch();
        //     Debug.Log("Une caisse a activ√© le d√©clencheur !");
        // }
    }

    /// <summary>
    /// G√®re la logique de fin de niveau.
    /// </summary>
    public void HandleLevelCompletion()
    {
        // On s'assure que la logique ne s'ex√©cute qu'une seule fois
        if (levelCompleted) return;
        levelCompleted = true;

        Debug.Log("Le joueur a atteint le point de fin de niveau !");

        // Fait appara√Ætre des fleurs √† la position du spawner
        if (spawnerToTrigger != null && flowersPrefab != null)
        {
            for (int i = 0; i < flowersToSpawn; i++)
            {
                // Ici, on instancie les fleurs. On pourrait ajouter une l√©g√®re variance
                Vector3 spawnPosition = spawnerToTrigger.transform.position + new Vector3(Random.Range(-1f, 1f), Random.Range(-1f, 1f), 0);
                Instantiate(flowersPrefab, spawnPosition, Quaternion.identity);
            }
        }

        // On appelle la fonction de fin de niveau apr√®s un court d√©lai pour laisser l'animation des fleurs se faire
        Invoke("EndLevel", 2f);
    }

    /// <summary>
    /// Charge le niveau suivant.
    /// </summary>
    public void EndLevel()
    {
        Debug.Log("Niveau termin√© !");
        // R√©initialise l'√©tat persistant avant de changer de sc√®ne pour √©viter les bugs
        PersistentState.Instance.ClearState();
        SceneManager.LoadScene(nextSceneName);
    }
    

}
